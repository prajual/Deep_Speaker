
# AveragePooling1D(name='average')(x)
# squeeze first! Reshape()

# test 1
# x = Lambda(lambda y: K.squeeze(y, axis=1))(x)
# x = AveragePooling1D(name='average')(x)

# test 2

# Maybe no averagePooling1D here but later on.
# def convolutional_model():
#     # http://cs231n.github.io/convolutional-networks/
#     # conv weights
#     # #params = ks * ks * nb_filters * num_channels_input
#
#     # Conv128-s
#     # 5*5*128*128/2+128
#     # ks*ks*nb_filters*channels/strides+bias(=nb_filters)
#
#     inputs = Input(shape=[20, 64, 4])
#
#     def conv_and_res_block(inp, filters, stage):
#         o = Conv2D(filters,
#                    kernel_size=5,
#                    strides=2,
#                    padding='same',
#                    kernel_initializer='glorot_uniform',
#                    kernel_regularizer=regularizers.l2(l=0.0001), name='conv{}-s'.format(filters))(inp)
#         o = clipped_relu(o)
#         print(o)
#         for i in range(3):
#             o = identity_block(o, kernel_size=3, filters=filters, stage=stage, block=i)
#             print(o)
#         return o
#
#     x = conv_and_res_block(inputs, 64, stage=1)
#     x = conv_and_res_block(x, 128, stage=2)
#     x = conv_and_res_block(x, 256, stage=3)
#     x = conv_and_res_block(x, 512, stage=4)
#
#     # AveragePooling1D(name='average')(x)
#     # squeeze first! Reshape()
#
#     # test 1
#     # x = Lambda(lambda y: K.squeeze(y, axis=1))(x)
#     # x = AveragePooling1D(name='average')(x)
#
#     # test 2
#     x = Reshape((-1, 2048))(x)
#     x = AveragePooling1D(name='average')(x)
#
#     x = Dense(512, name='affine')(x)
#     x = Lambda(lambda y: y / K.max(y, axis=1), name='ln')(x)
#     m = Model(inputs, x, name='convolutional')
#     return m




#
# VERSION 1
# def convolutional_model():
#     # http://cs231n.github.io/convolutional-networks/
#     # conv weights
#     # #params = ks * ks * nb_filters * num_channels_input
#
#     inputs = Input(shape=[1, 20, 64])
#
#     def conv_and_res_block(inp, filters, stage):
#         o = Conv2D(filters,
#                    kernel_size=5,
#                    strides=2,
#                    padding='same',
#                    kernel_initializer='glorot_uniform',
#                    kernel_regularizer=regularizers.l2(l=0.0001))(inp)
#         o = clipped_relu(o)
#         print(o)
#         for i in range(3):
#             o = identity_block(o, kernel_size=3, filters=filters, stage=stage, block=i)
#             print(o)
#         return o
#
#     x = conv_and_res_block(inputs, 64, stage=1)
#     x = conv_and_res_block(x, 128, stage=2)
#     x = conv_and_res_block(x, 256, stage=3)
#     x = conv_and_res_block(x, 512, stage=4)
#
#     # AveragePooling1D(name='average')(x)
#     # squeeze first! Reshape()
#
#     x = Lambda(lambda y: K.squeeze(y, axis=1))(x)
#     x = AveragePooling1D(name='average')(x)
#     x = Dense(512, name='affine')(x)
#     x = Lambda(lambda y: y / K.max(y, axis=1), name='ln')(x)
#     m = Model(inputs, x, name='convolutional')
#     return m


    # inputs_list = []
    # outputs_list = []
    # for i in range(num_frames):
    #     inputs = Input(shape=input_shapes)
    #     inputs_list.append(inputs)
    #     x = cnn_component(inputs)
    #     outputs_list.append(x)
    #
    # def lambda_average(inp):
    #     out = inp[0]
    #     t = len(inp)
    #     for j in range(1, t):
    #         out += inp[j]
    #     out *= (1.0 / t)
    #     return out
    #
    # average_layer = get(Lambda(lambda y: lambda_average(y), name='average'))  # average
    # x = average_layer(outputs_list)
    # x = Dense(512, name='affine')(x)
    # x = Lambda(lambda y: K.squeeze(K.squeeze(y, axis=1), axis=1))(x)
    # x = Lambda(lambda y: y / K.max(y, axis=1), name='ln')(x)
    # m = Model(inputs_list, x, name='convolutional')
    # return m

    # .shape = (BATCH_SIZE, 512)

    # x = Lambda(lambda y: K.squeeze(K.squeeze(y, axis=1), axis=1))(x)
    # x = Lambda(lambda y: K.reshape(y, (BATCH_SIZE, NUM_FRAMES, 512)))(x)
    # x = Lambda(lambda y: K.mean(y, axis=1))(x)  # .shape = (BATCH_SIZE, 2048)
    # # x / K.squeeze(RepeatVector(512)(K.reshape(K.max(x, axis=1), (-1, 1))), axis=2)
    # x = Lambda(lambda y: y / K.squeeze(RepeatVector(512)(K.reshape(K.max(y, axis=1), (-1, 1))), axis=2), name='ln')(
    #     x)  # .shape = (BATCH_SIZE, 512)
    #
    # # upsampling to maintain compatibility with keras framework
    # x = Lambda(lambda y: K.tile(y, (NUM_FRAMES, 1)))(x)
